//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Utils/Input/Object Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Backend.Util.Input
{
    public partial class @ObjectControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ObjectControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Object Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""cd1e6645-52e4-49f1-aecc-0c7a81e2f47f"",
            ""actions"": [
                {
                    ""name"": ""MoveToUpDirection"",
                    ""type"": ""Button"",
                    ""id"": ""dd267086-4f38-43d0-83ba-11ad4feedb30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveToDownDirection"",
                    ""type"": ""Button"",
                    ""id"": ""c4257387-5fd8-4f47-9bec-4963b72c9bdd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveToLeftDirection"",
                    ""type"": ""Button"",
                    ""id"": ""cd83dd94-fa7f-4885-9954-15d5ed6e38b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveToRightDirection"",
                    ""type"": ""Button"",
                    ""id"": ""c83ec847-be9c-478f-a8cb-ac27af5b49ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""f4104bc7-d40b-4a3f-9935-b70a46408259"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8e4d9e5a-45b9-4193-ae07-b80c657320e1"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8154e1b8-6828-49a1-bec0-a6de8d03bd09"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""MoveToRightDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efe4350a-2f42-4f96-8701-98d3787e0d17"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""MoveToDownDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff080ada-4b5c-4314-87bf-d8d11d3c16fa"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""MoveToUpDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62696776-b608-454b-be80-0276cbccd300"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""MoveToLeftDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Desktop"",
            ""bindingGroup"": ""Desktop"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_MoveToUpDirection = m_Player.FindAction("MoveToUpDirection", throwIfNotFound: true);
            m_Player_MoveToDownDirection = m_Player.FindAction("MoveToDownDirection", throwIfNotFound: true);
            m_Player_MoveToLeftDirection = m_Player.FindAction("MoveToLeftDirection", throwIfNotFound: true);
            m_Player_MoveToRightDirection = m_Player.FindAction("MoveToRightDirection", throwIfNotFound: true);
            m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_MoveToUpDirection;
        private readonly InputAction m_Player_MoveToDownDirection;
        private readonly InputAction m_Player_MoveToLeftDirection;
        private readonly InputAction m_Player_MoveToRightDirection;
        private readonly InputAction m_Player_Jump;
        public struct PlayerActions
        {
            private @ObjectControls m_Wrapper;
            public PlayerActions(@ObjectControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveToUpDirection => m_Wrapper.m_Player_MoveToUpDirection;
            public InputAction @MoveToDownDirection => m_Wrapper.m_Player_MoveToDownDirection;
            public InputAction @MoveToLeftDirection => m_Wrapper.m_Player_MoveToLeftDirection;
            public InputAction @MoveToRightDirection => m_Wrapper.m_Player_MoveToRightDirection;
            public InputAction @Jump => m_Wrapper.m_Player_Jump;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @MoveToUpDirection.started += instance.OnMoveToUpDirection;
                @MoveToUpDirection.performed += instance.OnMoveToUpDirection;
                @MoveToUpDirection.canceled += instance.OnMoveToUpDirection;
                @MoveToDownDirection.started += instance.OnMoveToDownDirection;
                @MoveToDownDirection.performed += instance.OnMoveToDownDirection;
                @MoveToDownDirection.canceled += instance.OnMoveToDownDirection;
                @MoveToLeftDirection.started += instance.OnMoveToLeftDirection;
                @MoveToLeftDirection.performed += instance.OnMoveToLeftDirection;
                @MoveToLeftDirection.canceled += instance.OnMoveToLeftDirection;
                @MoveToRightDirection.started += instance.OnMoveToRightDirection;
                @MoveToRightDirection.performed += instance.OnMoveToRightDirection;
                @MoveToRightDirection.canceled += instance.OnMoveToRightDirection;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @MoveToUpDirection.started -= instance.OnMoveToUpDirection;
                @MoveToUpDirection.performed -= instance.OnMoveToUpDirection;
                @MoveToUpDirection.canceled -= instance.OnMoveToUpDirection;
                @MoveToDownDirection.started -= instance.OnMoveToDownDirection;
                @MoveToDownDirection.performed -= instance.OnMoveToDownDirection;
                @MoveToDownDirection.canceled -= instance.OnMoveToDownDirection;
                @MoveToLeftDirection.started -= instance.OnMoveToLeftDirection;
                @MoveToLeftDirection.performed -= instance.OnMoveToLeftDirection;
                @MoveToLeftDirection.canceled -= instance.OnMoveToLeftDirection;
                @MoveToRightDirection.started -= instance.OnMoveToRightDirection;
                @MoveToRightDirection.performed -= instance.OnMoveToRightDirection;
                @MoveToRightDirection.canceled -= instance.OnMoveToRightDirection;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        private int m_DesktopSchemeIndex = -1;
        public InputControlScheme DesktopScheme
        {
            get
            {
                if (m_DesktopSchemeIndex == -1) m_DesktopSchemeIndex = asset.FindControlSchemeIndex("Desktop");
                return asset.controlSchemes[m_DesktopSchemeIndex];
            }
        }
        public interface IPlayerActions
        {
            void OnMoveToUpDirection(InputAction.CallbackContext context);
            void OnMoveToDownDirection(InputAction.CallbackContext context);
            void OnMoveToLeftDirection(InputAction.CallbackContext context);
            void OnMoveToRightDirection(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
    }
}
